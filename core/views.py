import logging

from django.db.models import Avg
from django.http import JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from datetime import datetime
from datetime import timedelta, date

from django.views.decorators.csrf import csrf_exempt

from .models import User, Doctor, Clinic, Specialty, DoctorSchedule, Consultation, Patient, TrainingSession, \
    ConsultationDocument, DoctorReview
from .forms import ScheduleForm, DoctorForm, ClinicRegisterForm, TrainingSessionForm, DoctorProfileForm, \
    PatientProfileForm, PatientDocumentForm, ClinicProfileForm, ConsultationSummaryForm, ConsultationDocumentForm, \
    PatientRegisterForm, DoctorCreationForm, DoctorUpdateForm
import locale
from django.utils.timezone import now
from babel.dates import format_date

locale.setlocale(locale.LC_TIME, 'kk_KZ.utf8')
MONTHS_KZ = {
    "January": "“ö–∞“£—Ç–∞—Ä",
    "February": "–ê“õ–ø–∞–Ω",
    "March": "–ù–∞—É—Ä—ã–∑",
    "April": "–°”ô—É—ñ—Ä",
    "May": "–ú–∞–º—ã—Ä",
    "June": "–ú–∞—É—Å—ã–º",
    "July": "–®—ñ–ª–¥–µ",
    "August": "–¢–∞–º—ã–∑",
    "September": "“ö—ã—Ä–∫“Ø–π–µ–∫",
    "October": "“ö–∞–∑–∞–Ω",
    "November": "“ö–∞—Ä–∞—à–∞",
    "December": "–ñ–µ–ª—Ç–æ“õ—Å–∞–Ω",
}

def localize_date(date):
    return format_date(date, format='d MMMM yyyy', locale='ru')
def home(request):
    return render(request, "core/home.html")

# üè• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
def register(request):
    if request.method == "POST":
        form = PatientRegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
            messages.success(request, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
            return redirect("patient_profile")  # –†–µ–¥–∏—Ä–µ–∫—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
    else:
        form = PatientRegisterForm()

    return render(request, "core/auth/register.html", {"form": form})

# üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def user_login(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("home")
        else:
            messages.error(request, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    return render(request, "core/auth/login.html")








@login_required
def delete_schedule_day(request, date):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    """
    doctor = request.user.doctor  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–∞
    slots = DoctorSchedule.objects.filter(doctor=doctor, date=date, is_booked=False)

    if not slots.exists():
        messages.error(request, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ‚Äî –ª–∏–±–æ –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤, –ª–∏–±–æ –æ–Ω–∏ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        slots.delete()
        messages.success(request, f"–í—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ {date} —É–¥–∞–ª–µ–Ω—ã.")

    return redirect("view_schedule")

logger = logging.getLogger(__name__)  # –õ–æ–≥–≥–µ—Ä

@login_required
def clinic_profile(request):
    clinic = get_object_or_404(Clinic, user=request.user)

    if request.method == "POST":
        form = ClinicProfileForm(request.POST, request.FILES, instance=clinic)
        if form.is_valid():
            form.save()
            return redirect("clinic_profile")
    else:
        form = ClinicProfileForm(instance=clinic)

    doctors = Doctor.objects.filter(clinic=clinic)

    return render(request, "core/clinics/clinic_profile.html", {
        "form": form,
        "clinic": clinic,
        "doctors": doctors
    })

from datetime import date, timedelta, datetime, time
from django.http import JsonResponse
from core.models import DoctorSchedule

def create_next_month_schedule(request):
    doctor = request.user.doctor  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞—á–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    today = date.today()
    first_day_next_month = (today.replace(day=1) + timedelta(days=32)).replace(day=1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
    existing_slots = DoctorSchedule.objects.filter(
        doctor=doctor,
        date__year=first_day_next_month.year,
        date__month=first_day_next_month.month
    )

    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞ {first_day_next_month.strftime('%B %Y')}: {existing_slots.count()}")

    if existing_slots.exists():
        print("‚ö† –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–ª–æ—Ç–æ–≤...")
        existing_slots.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    new_slots = []
    for day in range(1, 32):  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        try:
            new_date = first_day_next_month.replace(day=day)
        except ValueError:
            break  # –ï—Å–ª–∏ –¥–µ–Ω—å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–µ—Å—è—Ü–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

        for hour in range(9, 18):  # –í—Ä–µ–º—è —Å 9:00 –¥–æ 17:00
            start_time = time(hour, 0)  # –ù–∞—á–∞–ª–æ –ø—Ä–∏—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)
            end_time = time(hour + 1, 0)  # –ö–æ–Ω–µ—Ü –ø—Ä–∏—ë–º–∞ (–Ω–∞ 1 —á–∞—Å –ø–æ–∑–∂–µ)

            new_slots.append(DoctorSchedule(
                doctor=doctor,
                date=new_date,
                start_time=start_time,
                end_time=end_time,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                is_booked=False
            ))

    DoctorSchedule.objects.bulk_create(new_slots)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(new_slots)} —Å–ª–æ—Ç–æ–≤ –Ω–∞ {first_day_next_month.strftime('%B %Y')}")

    return JsonResponse({"success": f"–°–æ–∑–¥–∞–Ω–æ {len(new_slots)} —Å–ª–æ—Ç–æ–≤ –Ω–∞ {first_day_next_month.strftime('%B %Y')}"})

@login_required
def patient_consultations(request):
    if request.user.role != 'patient':
        return redirect('home')

    consultations = Consultation.objects.filter(patient__user=request.user).order_by("-schedule__date")
    return render(request, "core/client/patient_consultations.html", {"consultations": consultations})

def clinic_detail(request, clinic_id):
    clinic = get_object_or_404(Clinic, id=clinic_id)
    doctors = Doctor.objects.filter(clinic=clinic)

    return render(request, "core/clinics/clinic_detail.html", {"clinic": clinic, "doctors": doctors})
# üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
def user_logout(request):
    logout(request)
    return redirect("home")

# üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
def doctor_list(request):
    doctors = Doctor.objects.all()
    return render(request, "core/doctor/doctors.html", {"doctors": doctors})

# üè• –°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫
def clinic_list(request):
    clinics = Clinic.objects.all()
    return render(request, "core/clinics/clinics.html", {"clinics": clinics})

# ü©∫ –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
def specialties_list(request):
    specialties = Specialty.objects.all()
    return render(request, "core/doctor/specialties.html", {"specialties": specialties})

# üîé –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
def doctors_by_specialty(request, specialty_id):
    specialty = get_object_or_404(Specialty, id=specialty_id)
    doctors = Doctor.objects.filter(specialties=specialty)
    return render(request, "core/doctor/doctors_by_specialty.html", {"doctors": doctors, "specialty": specialty})

# üóìÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–∞—á–∞
def doctor_schedule(request, doctor_id):
    doctor = get_object_or_404(Doctor, id=doctor_id)
    unique_dates = DoctorSchedule.objects.filter(doctor=doctor, is_booked=False) \
        .values_list('date', flat=True).distinct()

    reviews = DoctorReview.objects.filter(doctor=doctor).order_by("-created_at")
    doctor.average_rating = DoctorReview.objects.filter(doctor=doctor).aggregate(Avg('rating'))['rating__avg']

    return render(request, "core/client/doctor_schedule.html", {
        "doctor": doctor,
        "unique_dates": unique_dates,
        "reviews": reviews,
    })

def available_times(request, doctor_id):
    date_str = request.GET.get("date")
    doctor = get_object_or_404(Doctor, id=doctor_id)

    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        slots = DoctorSchedule.objects.filter(doctor=doctor, date=selected_date, is_booked=False)

        times = [{"id": slot.id, "start_time": slot.start_time.strftime("%H:%M")} for slot in slots]
        return JsonResponse({"times": times})

    except ValueError:
        return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"}, status=400)

def get_schedule_by_date(request, doctor_id):
    date_str = request.GET.get("date")  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ GET-–∑–∞–ø—Ä–æ—Å–∞

    print(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {date_str}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

    if not date_str:
        return JsonResponse({"error": "–î–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞"}, status=400)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º `datetime.strptime()` –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç `date`
        selected_date = datetime.strptime(date_str.strip(), "%Y-%m-%d").date()
        print(f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: {selected_date}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

        doctor = get_object_or_404(Doctor, id=doctor_id)
        slots = DoctorSchedule.objects.filter(
            doctor=doctor, date=selected_date, is_booked=False
        ).order_by("start_time")

        times = [{"id": slot.id, "start_time": slot.start_time.strftime("%H:%M")} for slot in slots]
        return JsonResponse({"times": times})

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –û–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DD."}, status=400)

def format_date_kz(date):
    month_en = date.strftime("%B")  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    month_kz = MONTHS_KZ.get(month_en, month_en)  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π
    return date.strftime(f"%d {month_kz} %Y")  # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É
@login_required
def get_doctor_schedule_by_date(request):
    doctor = get_object_or_404(Doctor, user=request.user)
    date_str = request.GET.get("date")

    if not date_str:
        return JsonResponse({"error": "–î–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞"}, status=400)

    try:
        selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        slots = DoctorSchedule.objects.filter(doctor=doctor, date=selected_date).order_by("start_time").distinct()

        times = []
        seen_times = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

        for slot in slots:
            if slot.start_time not in seen_times:
                consultation = Consultation.objects.filter(schedule=slot).first()
                times.append({
                    "id": slot.id,
                    "start_time": slot.start_time.strftime("%H:%M"),
                    "is_booked": slot.is_booked,
                    "consultation_id": consultation.id if consultation else None,
                    "video_link": consultation.video_link if consultation else None,
                    "summary": consultation.summary if consultation else None
                })
                seen_times.add(slot.start_time)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å

        return JsonResponse({"times": times})

    except ValueError:
        return JsonResponse({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è YYYY-MM-DD."}, status=400)



@login_required
def add_video_link(request, schedule_id):
    print('qwe')
    print(schedule_id)
    consultation = get_object_or_404(Consultation, schedule_id=schedule_id)

    if request.method == "POST":
        video_link = request.POST.get("video_link")
        consultation.video_link = video_link
        consultation.save()
        return redirect("view_schedule")

    return render(request, "core/doctor/add_video_link.html", {"consultation": consultation})


@login_required
def add_consultation_summary(request, schedule_id):
    consultation = get_object_or_404(Consultation, schedule_id=schedule_id)

    if request.method == "POST":
        summary_form = ConsultationSummaryForm(request.POST, instance=consultation)
        document_form = ConsultationDocumentForm(request.POST, request.FILES)

        if summary_form.is_valid():
            summary_form.save()

        if document_form.is_valid():
            for file in request.FILES.getlist('file'):
                ConsultationDocument.objects.create(consultation=consultation, file=file)

            messages.success(request, "–ò—Ç–æ–≥–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return redirect("view_schedule")

    else:
        summary_form = ConsultationSummaryForm(instance=consultation)
        document_form = ConsultationDocumentForm()

    return render(request, "core/doctor/add_consultation_summary.html", {
        "summary_form": summary_form,
        "document_form": document_form,
        "consultation": consultation
    })

def consent_view(request):
    return render(request, "core/client/consent.html")
@login_required
def delete_schedule_slot(request, schedule_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω.
    """
    slot = get_object_or_404(DoctorSchedule, id=schedule_id, doctor__user=request.user)

    if slot.is_booked:
        return JsonResponse({"error": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç!"}, status=400)

    slot.delete()

    # ‚úÖ –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
    return JsonResponse({"message": "–°–ª–æ—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ."}, status=200, safe=False)


# üìÜ –í—Ä–∞—á —Å–æ–∑–¥–∞—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ



@login_required
def create_schedule(request):
    if request.method == "POST":
        print(request.POST)  # –û—Ç–æ–±—Ä–∞–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        form = ScheduleForm(request.POST)
        if form.is_valid():
            doctor = Doctor.objects.get(user=request.user)
            start_date = form.cleaned_data["start_date"]
            end_date = form.cleaned_data["end_date"]
            start_time = form.cleaned_data["start_time"]
            end_time = form.cleaned_data["end_time"]
            duration = int(form.cleaned_data["duration"])
            print(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {start_date} - {end_date}, {start_time} - {end_time}, —à–∞–≥ {duration} –º–∏–Ω—É—Ç")
            if doctor.is_duty:
                start_date = datetime.today().date()
                end_date = start_date + timedelta(days=30)  # –ù–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
                DoctorSchedule.generate_duty_schedule(doctor, start_date, end_date)
            else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                DoctorSchedule.generate_schedule(
                doctor=doctor,
                start_date=start_date,
                end_date=end_date,
                start_time=start_time,
                end_time=end_time,
                duration=duration
                )
            messages.success(request, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            return redirect("view_schedule")
        else:
            print("–§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞", form.errors)
    else:
        form = ScheduleForm()

    return render(request, "core/doctor/create_schedule_next_month.html", {"form": form})


# üëÄ –í—Ä–∞—á —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@login_required
def view_schedule(request):
    doctor = request.user.doctor  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞—á–∞
    schedules = DoctorSchedule.objects.filter(doctor=doctor).order_by("date", "start_time")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
    unique_dates = sorted(set(schedule.date for schedule in schedules))

    return render(request, "core/doctor/view_schedule.html", {
        "doctor": doctor,
        "schedule_dates": unique_dates
    })

# ‚úèÔ∏è –í—Ä–∞—á —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@login_required
def edit_schedule(request, schedule_id):
    if request.user.role != 'doctor':
        return redirect('home')

    slot = get_object_or_404(DoctorSchedule, id=schedule_id, doctor__user=request.user)

    if request.method == "POST":
        form = ScheduleForm(request.POST)
        if form.is_valid():
            slot.date = form.cleaned_data["start_date"]
            slot.start_time = form.cleaned_data["start_time"]
            slot.end_time = form.cleaned_data["end_time"]
            slot.duration = form.cleaned_data["duration"]
            slot.save()

            messages.success(request, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return redirect("view_schedule")
    else:
        form = ScheduleForm(initial={
            "start_date": slot.date,
            "start_time": slot.start_time,
            "end_time": slot.end_time,
            "duration": slot.duration
        })

    return render(request, "core/doctor/edit_schedule.html", {"form": form, "slot": slot})

# üìå –ü–∞—Ü–∏–µ–Ω—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫ –≤—Ä–∞—á—É
@login_required
def book_appointment(request, schedule_id):

    slot = get_object_or_404(DoctorSchedule, id=schedule_id, is_booked=False)

    if request.user.role != "patient":
        messages.error(request, "–¢–æ–ª—å–∫–æ –ø–∞—Ü–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º.")
        return redirect("home")

    patient = get_object_or_404(Patient, user=request.user)  # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º `Patient`

    consultation = Consultation.objects.create(
        doctor=slot.doctor,
        patient=patient,  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Patient, –∞ –Ω–µ User
        schedule=slot
    )

    slot.is_booked = True
    slot.save()

    messages.success(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏—ë–º!")
    return redirect("appointment_success", consultation.id)

@login_required
def delete_schedule(request, schedule_id):
    if request.user.role != 'doctor':
        return redirect('home')

    slot = get_object_or_404(DoctorSchedule, id=schedule_id, doctor__user=request.user)

    if slot.is_booked:
        messages.error(request, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    else:
        slot.delete()
        messages.success(request, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

    return redirect("view_schedule")
# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@login_required
def appointment_success(request, consultation_id):
    consultation = get_object_or_404(Consultation, id=consultation_id, patient__user=request.user)
    return render(request, "core/client/appointment_success.html", {"consultation": consultation})




# üè• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
def register_clinic(request):
    if request.method == "POST":
        form = ClinicRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö–ª–∏–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
            return redirect("login")
    else:
        form = ClinicRegisterForm()
    return render(request, "core/auth/register_clinic.html", {"form": form})

# üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
def clinic_dashboard(request):
    if request.user.is_authenticated and request.user.role == "clinic":
        clinic = get_object_or_404(Clinic, user=request.user)
        doctors = Doctor.objects.filter(clinic=clinic)
        return render(request, "core/clinics/clinic_dashboard.html", {"clinic": clinic, "doctors": doctors})
    return redirect("login")

# ü©∫ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞ –∫–ª–∏–Ω–∏–∫–æ–π
def add_doctor(request):
    if request.method == "POST":
        form = DoctorCreationForm(request.POST, request.FILES)
        if form.is_valid():
            username = form.cleaned_data["username"]
            email = form.cleaned_data["email"]
            password = form.cleaned_data["password"]
            is_duty = form.cleaned_data["is_duty"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if User.objects.filter(username=username).exists():
                messages.error(request, "–ë“±–ª –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∞—Ç—ã “õ–æ–ª–¥–∞–Ω—ã—Å—Ç–∞!")
                return redirect("add_doctor")
            if User.objects.filter(email=email).exists():
                messages.error(request, "–ë“±–ª Email “õ–æ–ª–¥–∞–Ω—ã—Å—Ç–∞!")
                return redirect("add_doctor")

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.objects.create_user(
                username=username,
                email=email,
                password=password,
                role="doctor"  # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å "doctor"
            )

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–Ω–∏–∫—É —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            try:
                clinic = request.user.clinic_account
            except Clinic.DoesNotExist:
                messages.error(request, "–ö–ª–∏–Ω–∏–∫–∞ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.")
                return redirect("add_doctor")

            # ‚úÖ –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–∞ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º —Å –∫–ª–∏–Ω–∏–∫–æ–π
            doctor = form.save(commit=False)
            doctor.user = user
            doctor.clinic = clinic
            doctor.is_duty = is_duty  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞
            doctor.save()
            form.save_m2m()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ManyToMany —Å–≤—è–∑–∏

            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å "–í–û–ë - –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏" –¥–ª—è –¥–µ–∂—É—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π
            if is_duty:
                wob_specialty, created = Specialty.objects.get_or_create(name="–í–û–ë - –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏")
                doctor.specialties.add(wob_specialty)

                # ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 24/7 —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
                start_date = datetime.today().date()
                end_date = start_date + timedelta(days=30)  # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
                DoctorSchedule.generate_duty_schedule(doctor, start_date, end_date)

            messages.success(request, "–î”ô—Ä—ñ–≥–µ—Ä —Å”ô—Ç—Ç—ñ “õ–æ—Å—ã–ª–¥—ã!")
            return redirect("clinic_dashboard")
        else:
            print(form.errors)

    else:
        form = DoctorCreationForm()

    return render(request, "core/clinics/add_doctor.html", {"form": form})

@login_required
def edit_doctor(request, doctor_id):
    doctor = get_object_or_404(Doctor, id=doctor_id, clinic=request.user.clinic_account)  # –¢–æ–ª—å–∫–æ –≤—Ä–∞—á–∏ —ç—Ç–æ–π –∫–ª–∏–Ω–∏–∫–∏

    if request.method == "POST":
        form = DoctorUpdateForm(request.POST, request.FILES, instance=doctor)
        if form.is_valid():
            is_duty = form.cleaned_data["is_duty"]

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞
            if is_duty != doctor.is_duty:
                doctor.is_duty = is_duty
                # ‚úÖ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                DoctorSchedule.objects.filter(doctor=doctor).delete()

                if is_duty:
                    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º "–í–û–ë" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π –≤—Ä–∞—á
                    wob_specialty, _ = Specialty.objects.get_or_create(name="–í–û–ë - –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏")
                    doctor.specialties.add(wob_specialty)
                    # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 24/7 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    start_date = datetime.today().date()
                    end_date = start_date + timedelta(days=30)
                    DoctorSchedule.generate_duty_schedule(doctor, start_date, end_date)
                else:
                    # ‚úÖ –£–±–∏—Ä–∞–µ–º "–í–û–ë" –µ—Å–ª–∏ –Ω–µ –¥–µ–∂—É—Ä–Ω—ã–π
                    wob_specialty = Specialty.objects.filter(name="–í–û–ë - –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏").first()
                    if wob_specialty:
                        doctor.specialties.remove(wob_specialty)

            form.save()
            messages.success(request, "–î”ô—Ä—ñ–≥–µ—Ä —Å”ô—Ç—Ç—ñ –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã!")
            return redirect("clinic_dashboard")
        else:
            messages.error(request, "“ö–∞—Ç–µ! –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ —Å–∞“õ—Ç–∞—É–¥–∞ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.")
    else:
        form = DoctorUpdateForm(instance=doctor)

    return render(request, "core/clinics/edit_doctor.html", {"form": form, "doctor": doctor})
# üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞
@login_required
def delete_doctor(request, doctor_id):
    if request.user.role != "clinic":
        return redirect("home")

    clinic = get_object_or_404(Clinic, user=request.user)
    doctor = get_object_or_404(Doctor, id=doctor_id, clinic=clinic)

    if request.method == "POST":
        doctor.delete()
        messages.success(request, "–í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        return redirect("clinic_dashboard")

    return render(request, "core/clinics/delete_doctor.html", {"doctor": doctor})

@login_required
def create_training(request):
    doctor = get_object_or_404(Doctor, user=request.user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤—Ä–∞—á–∞ 5+ –ª–µ—Ç —Å—Ç–∞–∂–∞
    experience_years = (datetime.now().year - doctor.experience_years)
    if experience_years < 5:
        messages.error(request, "–í—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 5 –ª–µ—Ç —Å—Ç–∞–∂–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—É—á–∞—é—â–∏–µ —Å–æ–∑–≤–æ–Ω—ã.")
        return redirect("home")

    if request.method == "POST":
        form = TrainingSessionForm(request.POST)
        if form.is_valid():
            training = form.save(commit=False)
            training.organizer = doctor
            training.specialty = doctor.specialty
            training.save()
            messages.success(request, "–û–±—É—á–∞—é—â–∏–π —Å–æ–∑–≤–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return redirect("trainings_list")
    else:
        form = TrainingSessionForm()

    return render(request, "core/doctor/create_training.html", {"form": form})

# üìå –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—É—á–∞—é—â–∏—Ö —Å–æ–∑–≤–æ–Ω–æ–≤
@login_required
def trainings_list(request):
    trainings = TrainingSession.objects.all().order_by("-date", "start_time")
    return render(request, "core/doctor/trainings_list.html", {"trainings": trainings})

# üìå –ó–∞–ø–∏—Å—å –≤—Ä–∞—á–∞ –Ω–∞ –æ–±—É—á–∞—é—â–∏–π —Å–æ–∑–≤–æ–Ω

def join_training(request, training_id):
    training = get_object_or_404(TrainingSession, id=training_id)
    doctor = get_object_or_404(Doctor, user=request.user)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–æ–∫—Ç–æ—Ä–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è
    conflicting_schedules = DoctorSchedule.objects.filter(
        doctor=doctor,
        date=training.date,
        start_time__lte=training.end_time,
        end_time__gte=training.start_time,
        is_booked=True
    )

    if conflicting_schedules.exists():
        messages.error(request, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ç—Ä–µ–Ω–∏–Ω–≥, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è.")
        return redirect("trainings_list")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏–Ω–≥
    training.participants.add(doctor)
    messages.success(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏–Ω–≥!")
    return redirect("trainings_list")

@login_required
def patient_profile(request):
    patient = get_object_or_404(Patient, user=request.user)

    if request.method == "POST":
        form = PatientProfileForm(request.POST, request.FILES, instance=patient)
        doc_form = PatientDocumentForm(request.POST, request.FILES)

        if "save_profile" in request.POST:  # ‚úÖ –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
            if form.is_valid():
                form.save()
                messages.success(request, "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                return redirect("patient_profile")

        elif "upload_document" in request.POST:  # ‚úÖ –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
            if doc_form.is_valid():
                document = doc_form.save(commit=False)
                document.patient = patient
                document.save()
                messages.success(request, "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                return redirect("patient_profile")

    else:
        form = PatientProfileForm(instance=patient)
        doc_form = PatientDocumentForm()

    documents = patient.documents.all()  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞

    return render(request, "core/client/patient_profile.html", {
        "form": form,
        "doc_form": doc_form,
        "patient": patient,
        "documents": documents,
    })
@login_required
def doctor_patient_profile(request, patient_id):
    """–î–æ–∫—Ç–æ—Ä –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
    patient = get_object_or_404(Patient, id=patient_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–æ–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å —ç—Ç–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
    consultations = Consultation.objects.filter(doctor=request.user.doctor, patient=patient)

    if not consultations.exists():
        return render(request, "core/errors/no_access.html", {"message": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–∞—Ü–∏–µ–Ω—Ç–∞."})

    return render(request, "core/doctor/patient_profile.html", {"patient": patient, "consultations": consultations})
@login_required
def consultation_history(request):
    patient = get_object_or_404(Patient, user=request.user)
    consultations = Consultation.objects.filter(patient=patient).order_by("-schedule__date")
    return render(request, "core/client/consultation_history.html", {"consultations": consultations})

def add_review(request, consultation_id):
    consultation = get_object_or_404(Consultation, id=consultation_id, patient=request.user.patient)

    if request.method == "POST":
        rating = int(request.POST.get("rating"))
        comment = request.POST.get("comment", "")

        if not (1 <= rating <= 5):
            messages.error(request, "–ë–∞“ì–∞–ª–∞—É 1-–¥–µ–Ω 5-–∫–µ –¥–µ–π—ñ–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫")
            return redirect("consultation_history")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–∑—ã–≤
        if DoctorReview.objects.filter(consultation=consultation).exists():
            messages.error(request, "–°—ñ–∑ –±“±–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è“ì–∞ –ø—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä–¥—ã“£—ã–∑!")
            return redirect("consultation_history")

        DoctorReview.objects.create(
            doctor=consultation.doctor,
            patient=request.user.patient,
            consultation=consultation,
            rating=rating,
            comment=comment
        )

        messages.success(request, "–°—ñ–∑–¥—ñ“£ –ø—ñ–∫—ñ—Ä—ñ“£—ñ–∑ —Å–∞“õ—Ç–∞–ª–¥—ã!")
        return redirect("consultation_history")

    return redirect("consultation_history")

@login_required
def doctor_consultation_history(request):
    doctor = get_object_or_404(Doctor, user=request.user)

    consultations = Consultation.objects.filter(doctor=doctor).order_by("-schedule__date")

    return render(request, "core/doctor/consultation_history.html", {
        "consultations": consultations
    })
@login_required
def doctor_profile(request):
    doctor = get_object_or_404(Doctor, user=request.user)

    if request.method == "POST":
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if 'photo' in request.FILES:
            doctor.photo = request.FILES['photo']

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        doctor.user.username = request.POST.get('username', doctor.user.username)
        doctor.license_number = request.POST.get('license_number', doctor.license_number)
        doctor.phone = request.POST.get('phone', doctor.phone)
        doctor.education = request.POST.get('education', doctor.education)

        doctor.user.save()
        doctor.save()
        messages.success(request, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    # –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –±–µ–∑ —Å—Å—ã–ª–æ–∫ –∏–ª–∏ –∏—Ç–æ–≥–æ–≤
    consultations = Consultation.objects.filter(doctor=doctor)
    filter_no_video = request.GET.get("no_video")
    filter_no_summary = request.GET.get("no_summary")

    if filter_no_video:
        consultations = consultations.filter(video_link__isnull=True)
    if filter_no_summary:
        consultations = consultations.filter(summary__isnull=True)

    return render(request, "core/doctor/doctor_profile.html", {
        "doctor": doctor,
        "consultations": consultations,
        "filter_no_video": filter_no_video,
        "filter_no_summary": filter_no_summary
    })

# üìå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞
@login_required
def edit_doctor_profile(request):
    doctor = get_object_or_404(Doctor, user=request.user)

    if request.method == "POST":
        form = DoctorProfileForm(request.POST, request.FILES, instance=doctor)
        if form.is_valid():
            form.save()
            messages.success(request, "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!")
            return redirect("doctor_profile")
    else:
        form = DoctorProfileForm(instance=doctor)

    return render(request, "core/doctor/edit_doctor_profile.html", {"form": form})


def duty_doctors(request):
    doctors = Doctor.objects.filter(is_duty=True)
    return render(request, "core/doctor/doctors.html", {"doctors": doctors})
@login_required
def clinic_doctors(request):
    if request.user.role != "clinic":
        return redirect("home")

    clinic = Clinic.objects.get(user=request.user)
    doctors = Doctor.objects.filter(clinic=clinic)

    return render(request, "core/clinics/clinic_doctors.html", {"doctors": doctors})