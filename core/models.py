from django.db import models
from django.contrib.auth.models import AbstractUser, BaseUserManager, Group, Permission
from datetime import datetime, timedelta

from django.utils.timezone import now


class UserManager(BaseUserManager):
    def create_user(self, username, email=None, password=None, **extra_fields):
        if not username:
            raise ValueError("The Username field must be set")
        email = self.normalize_email(email)
        extra_fields.setdefault("is_active", True)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, email=None, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(username, email, password, **extra_fields)

class User(AbstractUser):
    ROLE_CHOICES = (
        ('patient', 'Patient'),
        ('doctor', 'Doctor'),
        ('clinic', 'Clinic'),  # üîπ –î–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª—å –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏
        ('admin', 'Admin'),
    )
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='patient')
    groups = models.ManyToManyField(Group, related_name="custom_user_groups", blank=True)
    user_permissions = models.ManyToManyField(Permission, related_name="custom_user_permissions", blank=True)
    objects = UserManager()

    def __str__(self):
        return self.username

class Specialty(models.Model):
    """ –¢–∞–±–ª–∏—Ü–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –≤—Ä–∞—á–µ–π """
    name = models.CharField(max_length=255, unique=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name


class Patient(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    photo = models.ImageField(upload_to="patient_photos/", blank=True, null=True,verbose_name="–§–æ—Ç–æ")  # ‚úÖ –ü–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ
    iin = models.CharField(default="–ù–µ —É–∫–∞–∑–∞–Ω–æ",blank=True,max_length=12, verbose_name="–ñ–°–ù")
    phone = models.CharField(default="–ù–µ —É–∫–∞–∑–∞–Ω–æ",blank=True,max_length=15, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    weight = models.FloatField(default=0,blank=True,verbose_name="–°–∞–ª–º–∞“õ")
    height = models.FloatField(default=0,blank=True,verbose_name="–ë–æ–π—ã")
    allergies = models.TextField(default="–ù–µ —É–∫–∞–∑–∞–Ω–æ",blank=True, verbose_name="–ê–ª–ª–µ—Ä–≥–∏—è–ª–∞—Ä")  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    chronic_diseases = models.TextField(default="–ù–µ —É–∫–∞–∑–∞–Ω–æ",blank=True, verbose_name="–°–æ–∑—ã–ª–º–∞–ª—ã –∞—É—Ä—É–ª–∞—Ä")

    def __str__(self):
        return self.user.username


class PatientDocument(models.Model):
    """ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ """
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name="documents")
    file = models.FileField(upload_to="patient_documents/")
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"–î–æ–∫—É–º–µ–Ω—Ç {self.patient.user.username}"


class Clinic(models.Model):
    """ –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–Ω–∏–∫ """
    name = models.CharField(max_length=255)
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="clinic_account", null=True, blank=True)  # –≤—Ä–µ–º–µ–Ω–Ω–æ nullable
    city = models.CharField(max_length=255)
    email=models.TextField(max_length=255, blank=True, null=True)
    address = models.CharField(max_length=255)
    description = models.TextField()
    rating = models.FloatField(default=0.0)
    photo = models.ImageField(upload_to='clinics/', blank=True, null=True)
    phone = models.CharField(max_length=20,null=True)
    def __str__(self):
        return self.name

class Doctor(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="doctor")
    specialties = models.ManyToManyField(Specialty, related_name="doctors", verbose_name="–ú–∞–º–∞–Ω–¥—ã“ì—ã") # üîπ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–æ
    clinic = models.ForeignKey(Clinic, on_delete=models.CASCADE, related_name="doctors", default=1)
    license_number = models.CharField(max_length=20, unique=True)
    phone = models.CharField(max_length=20)
    education = models.TextField()
    rating = models.FloatField(default=0.0)
    photo = models.ImageField(upload_to="doctors/", null=True, blank=True)
    experience_years = models.PositiveIntegerField(default=0, verbose_name="–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
    is_duty = models.BooleanField(default=False, verbose_name="–î–µ–∂—É—Ä–Ω—ã–π –≤—Ä–∞—á")  # ‚úÖ –§–ª–∞–≥ –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞

    def save(self, *args, **kwargs):
        """ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å '–í–û–ë - –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏' """
        super().save(*args, **kwargs)
        wob_specialty, created = Specialty.objects.get_or_create(name="–í–û–ë - –≤—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏")

        if self.is_duty:
            self.specialties.add(wob_specialty)
        else:
            self.specialties.remove(wob_specialty)
    def get_experience_years(self):
        return now().year - self.experience_start_year
    def get_specialties(self):
        specialties = self.specialties.all().values_list('name', flat=True)


        return ", ".join(specialties)
    def __str__(self):
        return f"{self.user.get_full_name()} "

from datetime import datetime, timedelta

class DoctorSchedule(models.Model):
    doctor = models.ForeignKey('Doctor', on_delete=models.CASCADE, related_name="schedule")
    date = models.DateField()
    start_time = models.TimeField()
    end_time = models.TimeField()
    is_booked = models.BooleanField(default=False)

    @classmethod
    def generate_duty_schedule(cls, doctor, start_date, end_date):
        """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è 24/7 –¥–ª—è –¥–µ–∂—É—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π """
        slots = []
        current_date = start_date

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        breaks = [
            ("08:00", "09:00"),  # –ó–∞–≤—Ç—Ä–∞–∫
            ("13:00", "14:00"),  # –û–±–µ–¥
            ("19:00", "20:00")  # –£–∂–∏–Ω
        ]

        while current_date <= end_date:
            for hour in range(24):
                start_time = datetime.strptime(f"{hour:02d}:00", "%H:%M").time()
                end_time = (datetime.combine(datetime.today(), start_time) + timedelta(hours=1)).time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if cls.objects.filter(doctor=doctor, date=current_date, start_time=start_time).exists():
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤
                is_break = any(
                    start_time >= datetime.strptime(b[0], "%H:%M").time() and
                    start_time < datetime.strptime(b[1], "%H:%M").time()
                    for b in breaks
                )

                if not is_break:
                    slots.append(cls(
                        doctor=doctor,
                        date=current_date,
                        start_time=start_time,
                        end_time=end_time
                    ))

            current_date += timedelta(days=1)

        cls.objects.bulk_create(slots)
    @classmethod
    def generate_schedule(cls, doctor, start_date, end_date, start_time, end_time, duration):
        slots = []
        current_date = start_date

        # üî• –£–ë–ï–î–ò–ú–°–Ø, –ß–¢–û duration ‚Äî –≠–¢–û INT
        duration = int(duration)

        while current_date <= end_date:
            current_time = start_time

            while current_time < end_time:
                start_slot_datetime = datetime.combine(current_date, current_time)
                end_slot_datetime = start_slot_datetime + timedelta(minutes=duration)

                slots.append(cls(
                    doctor=doctor,
                    date=current_date,
                    start_time=start_slot_datetime.time(),
                    end_time=end_slot_datetime.time()
                ))

                current_time = end_slot_datetime.time()

            current_date += timedelta(days=1)

        cls.objects.bulk_create(slots)


class Consultation(models.Model):
    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)  # ‚ùó –ë—ã–ª–æ User, —Ç–µ–ø–µ—Ä—å Patient
    schedule = models.ForeignKey(DoctorSchedule, on_delete=models.CASCADE)
    video_link = models.URLField(blank=True, null=True)
    summary = models.TextField(blank=True, null=True)


    def __str__(self):
        return f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è {self.doctor.user.username} —Å {self.patient.user.username} ({self.schedule.date} {self.schedule.start_time})"


class ConsultationDocument(models.Model):
    """ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ """
    consultation = models.ForeignKey(Consultation, on_delete=models.CASCADE, related_name="documents")
    file = models.FileField(upload_to="consultation_documents/")
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"–î–æ–∫—É–º–µ–Ω—Ç {self.consultation.doctor.user.username}"


class DoctorReview(models.Model):
    doctor = models.ForeignKey("Doctor", on_delete=models.CASCADE)
    patient = models.ForeignKey("Patient", on_delete=models.CASCADE)
    consultation = models.OneToOneField("Consultation", on_delete=models.CASCADE, null=True, blank=True)  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ null=True, blank=True
    rating = models.IntegerField(choices=[(i, i) for i in range(1, 6)])
    comment = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('patient', 'consultation')  # –ß—Ç–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç –º–æ–≥ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–∑—ã–≤


class TrainingSession(models.Model):
    organizer = models.ForeignKey('Doctor', on_delete=models.CASCADE, related_name="organized_trainings")
    specialty = models.ForeignKey('Specialty', on_delete=models.CASCADE, related_name="trainings")
    date = models.DateField()
    start_time = models.TimeField()
    end_time = models.TimeField()
    video_link = models.URLField()
    description = models.TextField()
    participants = models.ManyToManyField('Doctor', related_name="trainings_attended", blank=True)

    def __str__(self):
        return f"–¢—Ä–µ–Ω–∏–Ω–≥ {self.specialty.name} –æ—Ç {self.organizer.user.username} ({self.date})"